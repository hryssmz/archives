AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: aws-sam-rust

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-s3bucket-${AWS::Region}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-RestApi
      Description:
        Fn::Sub: ${AWS::StackName} REST API
      StageName: dev
      Cors:
        AllowHeaders: "'*'"
        AllowMethods: "'*'"
        AllowOrigin: "'*'"
      OpenApiVersion: "3.0.1"
      DefinitionBody:
        openapi: "3.0.1"
        servers:
          - url: https://{restApiId}.execute-api.{region}.amazonaws.com/{basePath}
            variables:
              restApiId:
                default: hxhhn2xxx4
              region:
                default: ap-northeast-1
              basePath:
                default: dev
        info:
          title: My REST API
          version: "1.0"
        paths:
          /:
            post:
              operationId: HelloWorld
              tags:
                - Default
              requestBody:
                description: POST / request body
                content:
                  application/x-amz-json-1.1:
                    schema:
                      $ref: "#/components/schemas/HelloWorldRequest"
                required: true
              responses:
                "200":
                  description: 200 OK
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/HelloWorldResponse"
                      examples:
                        example1:
                          value:
                            message: Hello World!
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: "#/components/headers/Access-Control-Allow-Origin"
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations
                httpMethod: POST
        components:
          headers:
            Access-Control-Allow-Origin:
              description: Response header for CORS support
              schema:
                type: string
          schemas:
            HelloWorldRequest:
              description: Request body for HelloWorld
              type: object
              required:
                - url
              properties:
                url:
                  type: string
                  format: uri
            HelloWorldResponse:
              description: Response body for HelloWorld
              type: object
              required:
                - message
                - url
              properties:
                message:
                  type: string
                url:
                  type: string
                  format: uri

  HelloWorldFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: ${AWS::StackName}-HelloWorldFunctionPolicy-${AWS::Region}
      Description: Policy for HelloWorldFunction
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: S3AccessPermissions
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource:
              - Fn::Sub: arn:${AWS::Partition}:s3:::${S3Bucket}/*

  HelloWorldFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-HelloWorldFunctionRole-${AWS::Region}
      Description: Service role for HelloWorldFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Ref: HelloWorldFunctionPolicy

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-HelloWorldFunction
      Description: HelloWorld function
      Role:
        Fn::GetAtt: HelloWorldFunctionRole.Arn
      CodeUri: ./rust_app
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - x86_64
      Environment:
        Variables:
          BUCKET:
            Ref: S3Bucket
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Method: POST
            Path: /
            RestApiId:
              Ref: RestApi

  HelloWorldFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${HelloWorldFunction}
